# Animation

```{r, include = FALSE}
source("R/setup.R")
```

I've already done an animated time series for [Day -@sec-owid], so I thought I'd try to get more familiar with `r pkg("gganimate", "https://gganimate.com/")`.

```{r}
#| code-summary: Setup

library(tidyverse)
library(countrycode)
library(gganimate)

theme_set(theme_minimal())
```

## Data

I got all the original data just browsing [Our World in Data](https://ourworldindata.org).

* [Happiness](https://ourworldindata.org/happiness-and-life-satisfaction): World Happiness Report 2021
* [Working Hours](https://ourworldindata.org/working-hours): original data from [Huberman & Minns, 2007](https://www.sciencedirect.com/science/article/abs/pii/S0014498307000058), [PWT 9.1, 2019](https://www.rug.nl/ggdc/productivity/pwt/?lang=en)
* [Population](https://ourworldindata.org/world-population-growth): original data from [United Nations](https://population.un.org/wpp2019/Download/Standard/Interpolated/)

```{r}
# https://ourworldindata.org/happiness-and-life-satisfaction
happy <- read_csv("data/happiness-cantril-ladder.csv",
                  show_col_types = FALSE) %>%
  rename(happy = 4)

# https://ourworldindata.org/working-hours
work <- read_csv("data/annual-working-hours-per-worker.csv",
                  show_col_types = FALSE)%>%
  rename(work = 4)

# https://ourworldindata.org/world-population-growth
pop <- read_csv("data/population-by-broad-age-group.csv",
                  show_col_types = FALSE) %>%
  pivot_longer(cols = 4:8) %>%
  group_by(Entity, Code, Year) %>%
  summarise(pop = sum(value),
            .groups = "drop")

continent <- countrycode::codelist %>%
  select(Code = iso3c, continent) %>%
  drop_na()
```


```{r}
data <- happy %>%
  inner_join(work, by = c("Entity", "Code", "Year")) %>%
  inner_join(pop, by = c("Entity", "Code", "Year")) %>%
  left_join(continent, by = "Code")
```

### Plot

```{r anim-test, fig.width = 5, fig.height = 5}
data %>%
  filter(Year == max(Year)) %>%
  ggplot(aes(x = work, y = happy, size = pop, color = continent)) +
  geom_point(alpha = 0.9) +
  scale_size(range = c(3, 12), guide = "none") +
  scale_color_manual(values = c("#983E82", "#E2A458", "#F5DC70", "#59935B", "#467AAC"
  )) +
  coord_cartesian(xlim = c(1250, 2500), ylim = c(4, 8)) +
  labs(x = "Average Annual Working Hours per Worker",
       y = "Average Happiness Score",
       color = NULL) +
  theme(legend.position = c(.11, .17))
```

I used this [tutorial for datanovia](https://www.datanovia.com/en/blog/gganimate-how-to-create-plots-with-beautiful-animation-in-r/) to figure out the `shadow_wake()`.

```{r}
anim <- data %>%
  ggplot(aes(x = work, y = happy, size = pop, color = continent)) +
  geom_point(alpha = 0.9) +
  scale_size(range = c(3, 12), guide = "none") +
  scale_color_manual(values = c("#983E82", "#E2A458", "#F5DC70", "#59935B", "#467AAC"
  )) +
  coord_cartesian(xlim = c(1250, 2500), ylim = c(4, 8)) +
  labs(x = "Average Annual Working Hours per Worker",
       y = "Average Happiness Score",
       color = NULL) +
  theme(legend.position = c(.11, .17)) +
  transition_time(Year) +
  labs(title = "Year: {round(frame_time)}") +
  shadow_wake(wake_length = 0.1)
```

The animating takes awhile, so I always save to a file and set this chunk to not evaluate in the script.

```{r, eval = FALSE}
anim_save("images/day22.gif", 
          animation = anim, 
          nframes = 150, fps = 12, 
          start_pause = 5, end_pause = 5, 
          width = 5, height = 5, 
          units = "in", res = 150)
```

I'm still not entirely convinced of the utility of animated plots, but they do look cool!

```{r day22, echo = FALSE}
knitr::include_graphics("images/day22.gif")
```

